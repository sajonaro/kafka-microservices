version: '3.5'

networks:
  kafka-net:
    driver: bridge

volumes:
  clients_db_vol:

include: 
  - ./kafka-cluster.yaml

services:
  
  schema-registry:
    image: confluentinc/cp-schema-registry:4.1.1
    networks: 
    - kafka-net
    hostname: schema-registry
    container_name: schema-registry
    ports:
    - "38081:38081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:38081
      SCHEMA_REGISTRY_DEBUG: "true"
  
  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    networks: 
    - kafka-net
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - schema-registry
      - kafka1
      - kafka2
      - kafka-connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9093 
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONTROL_CENTER_CONNECT_CLUSTERS:  debezium:8083
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: schema-registry:38081
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  kafka-connect:
    image: debezium/connect
    container_name: kafka-connect-service
    networks: 
      - kafka-net
    hostname: kafka-connect-service  
    depends_on:
      - clients-database
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9093
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: docker-connect-debezium-configs
      OFFSET_STORAGE_TOPIC: docker-connect-debezium-offsets
      STATUS_STORAGE_TOPIC: docker-connect-debezium-status
            
