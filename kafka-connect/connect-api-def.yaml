openapi: 3.0.3
info:
  title: kafka connect API
  description: |-
    defined using Open API and swagger-editor tool
  version: 0.0.1
externalDocs:
  description: find out more about swagger.io
  url: http://swagger.io
servers:
  - name: connect-api
    url: http://localhost:8083
    description: kafka connect service
paths:
  /client:
    description: |
      Clients service
    servers:
      - url: http://localhost:4041/api/v1  
    get:
      summary: get a list of clients
      tags:
        - clients
      operationId: getAllClients
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clients'
    post:
      tags:
        - clients
      summary: create new client
      operationId: createClient
      requestBody:
        description: Create a new client
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/client'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client'          
        '405':
          description: Invalid input


components:
  schemas:
    client:
      required:
        - id
        - firstName
        - lastName
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: joe
        lastName:
          type: string
          example: Schmoe  
    clients:
      type: array
      items:
        $ref: '#/components/schemas/client'
    product:
      required:
        - id
        - description
        - title
        - price
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: "toshiba XYZ"  
        description:
          type: string
          example: "laptop computer"
        price:
          type: float
          example: 100.5  
    products:
      type: array
      items:
        $ref: '#/components/schemas/product'    
    order:
      required:
        - id
        - clientId
        - productId
        - quantity
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        clientId:
          type: integer
          format: int64
          example: 10
        productId:
          type: integer
          format: int64
          example: 10
        quantity:
          type: integer
          format: int64
          example: 10
    orders:
      type: array
      items:
        $ref: '#/components/schemas/order'

    error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 500
        message:
          type: string
          example: "internal error"
  

