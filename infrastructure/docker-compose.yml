version: '3.5'

services:
  
  zookeeper:
    image: confluentinc/cp-zookeeper:4.1.1
    networks: 
    - kafka-net     
    hostname: zookeeper
    container_name: zookeeper
    ports: 
    - ${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2  

  kafka1:
    image: confluentinc/cp-kafka
    networks: 
    - kafka-net
    hostname: kafka1
    container_name: broker1
    ports: 
    - "29092:29092"
    depends_on:
    - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka2:
    image: confluentinc/cp-kafka
    networks: 
    - kafka-net
    hostname: kafka2
    container_name: broker2
    ports: 
    - 29093:29093
    depends_on:
    - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  mysql-service:
    image: debezium/example-mysql:1.2
    container_name: mysql
    networks: 
      - kafka-net
    ports:
      - ${MYSQL_PORT}:${MYSQL_PORT}
    environment:
      MYSQL_ROOT_PASSWORD: debezium
      MYSQL_USER: mysqluser
      MYSQL_PASSWORD: mysqlpw
    volumes:
      - ./seed-data/movies.sql:/docker-entrypoint-initdb.d/z99_dump.sql

  schema-registry:
    image: confluentinc/cp-schema-registry:4.1.1
    networks: 
    - kafka-net
    hostname: schema-registry
    container_name: schema-registry
    ports:
    - ${SCHEMA_REGISTRY_PORT}:${SCHEMA_REGISTRY_PORT}
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:${SCHEMA_REGISTRY_PORT}
      SCHEMA_REGISTRY_DEBUG: "true"

  kafka-connect-source:
    image: debezium/connect
    container_name: debezium-connect
    networks: 
      - kafka-net
    hostname: debezium  
    depends_on:
      - mysql-service
      - schema-registry
    ports:
      - ${DEBEZIUM_SOURCE_CONNECT_PORT}:${DEBEZIUM_SOURCE_CONNECT_PORT}
    environment:
      BOOTSTRAP_SERVERS: kafka1:${KAFKA_PORT},kafka2:${KAFKA_PORT}
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: docker-connect-debezium-configs
      OFFSET_STORAGE_TOPIC: docker-connect-debezium-offsets
      STATUS_STORAGE_TOPIC: docker-connect-debezium-status

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    networks: 
    - kafka-net
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - schema-registry
      - kafka1
      - kafka2
      - kafka-connect-source
    ports:
      - ${CONTROL_CENTER_PORT}:${CONTROL_CENTER_PORT}
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka1:${KAFKA_PORT},kafka2:${KAFKA_PORT} 
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      CONTROL_CENTER_CONNECT_CLUSTERS:  debezium:${DEBEZIUM_SOURCE_CONNECT_PORT}
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: schema-registry:${SCHEMA_REGISTRY_PORT}
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: ${CONTROL_CENTER_PORT}  

  sqlite:
    image: sqlite:latest
    networks: 
     - kafka-net
    container_name: sqlite
    volumes:
      - /data:/db/data
    build:
      context: ./db 
    stdin_open: true
    tty: true
  
     
networks:
  kafka-net:
    driver: bridge